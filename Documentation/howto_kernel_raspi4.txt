
               =========================================
               simple howto for building a custom kernel
               =========================================

Author: Thorsten Johannvorderbrueggen
Email:  thorsten.johannvorderbrueggen@t-online.de
Date:   18.06.2021/16.06.2021

Content:

- Preparation
  -- Device
  -- Mountpoints
  -- Fstab for mountpoints

- Configure/build/install kernel
  -- Clone kernel
  -- Configure kernel
  -- Build kernel/modules/dtb
  -- Install modules
  -- Copy dtb/overlays
  -- Copy kernel/config

- Deploy SD-Card
  -- dtb/overlays
  -- Copy kernel/config
  -- Copy modules
  -- Copy cleaned source to sd card

- Finalize
  -- Finish -> after login
  -- Prepare linux tree to build your modules against the new kernel
  -- Prepare modules to link



Preparation
===========

Device
-------

- Raspberry 4

Mountpoints
-----------

Raspi:
 - kernel -> /mnt/raspi/raspi_kernel
 - rootfs -> /mnt/raspi/raspi_rootfs
 - home   -> /mnt/raspi/raspi_home


Fstab entrys for mountpoints
----------------------------

raspi:
 LABEL=KERNEL_RPI  /mnt/raspi/raspi_kernel  auto   noauto,user,rw    0       0
 LABEL=ROOTFS_RPI  /mnt/raspi/raspi_rootfs  auto   noauto,user,rw    0       0
 LABEL=HOME_RPI    /mnt/raspi/raspi_home    auto   noauto,user,rw    0       0


Installation of Cross-Compiler
------------------------------

This is summary to build a raspi4 kernel with void-linux.
My provided images use MUSL instead of GLIBC. So you need to install cross-aarch64-linux-musl and cross-aarch64-linux-musl-libc.


Configure/build/install kernel
==============================

Clone kernel
------------

DIR: $AMBIENT_REPO/kernel
KDO: git clone --depth=1 https://github.com/raspberrypi/linux


Configure kernel
----------------

DIR: $AMBIENT_REPO/kernel/linux-*
KDO: KERNEL=kernel8

KDO: cp $AMBIENT_REPO/configs/kernel_config_raspi4_5.10.x .config
KDO: make CROSS_COMPILE=aarch64-linux-musl- ARCH=arm64 menuconfig
or
KDO: make CROSS_COMPILE=aarch64-linux-musl- ARCH=arm64 bcm2711_defconfig
KDO: make CROSS_COMPILE=aarch64-linux-musl- ARCH=arm64 menuconfig


Build kernel/modules/dtb
------------------------

DIR: $AMBIENT_REPO/kernel/linux-*
KDO: make -j24 CROSS_COMPILE=aarch64-linux-musl- ARCH=arm64 Image modules dtbs


Install modules
---------------

DIR: $AMBIENT_REPO/kernel/linux-*
KDO: make ARCH=arm64 INSTALL_MOD_PATH=../modules_5.10.44 modules_install


Deploy SD-Card
==============

Copy dtb/overlays
-----------------

DIR: $AMBIENT_REPO/kernel/linux-*
KDO: sudo cp arch/arm64/boot/dts/broadcom/*.dtb /mnt/raspi/raspi_kernel/
KDO: sudo cp arch/arm64/boot/dts/overlays/*.dtb* /mnt/raspi/raspi_kernel/overlays/
and if you like:
KDO: sudo cp arch/arm64/boot/dts/overlays/README /mnt/raspi/raspi_kernel/overlays/


Copy kernel/config
------------------

DIR: $AMBIENT_REPO/kernel/linux-*
KDO: sudo cp arch/arm64/boot/Image /mnt/raspi/raspi_kernel/kernel8.img
KDO: sudo cp .config /mnt/raspi/raspi_kernel/


Copy modules
------------

# Note: maybe your need to remove the old one
DIR: $AMBIENT_REPO/kernel/linux-*
KDO: sudo rsync -avz ../modules_5.10.44/lib/modules/. /mnt/raspi/raspi_rootfs/lib/modules/.


Copy cleaned source to sd card
------------------------------

# Note: dont forget to make ARCH=arm clean
# Note: the linux source for /lib/modules/KERNEL_VER is now locate in /home/linux and not
#       in /usr/src/linux
DIR: $AMBIENT_REPO/kernel
KDO: sudo rsync -avz --delete linux /mnt/raspi/raspi_home/linux/.


Finalize
========

Finish -> after login
---------------------

DIR: /usr/src
KDO: depmod -a
MAYBE: remove your old kernel tree (also installed modules -> /lib/module/your_old_kernel)


Prepare linux tree to build your modules against the new kernel
---------------------------------------------------------------

DIR: /usr/src/linux
KDO: make clean
KDO: make scripts


Prepare modules to link
-----------------------

DIR: /lib/modules/5.10.44
KDO: rm build
KDO: rm source
KDO: ln -s /usr/src/linux source
KDO: ln -s /usr/src/linux build
